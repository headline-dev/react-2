{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\18305\\\\Desktop\\\\algosbuild\\\\src\\\\App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\n/* global AlgoSigner */\nimport './App.css';\nimport { Button, Container, Header, Message, Table } from \"semantic-ui-react\";\nimport { useState, useCallback } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst appId = 13793863;\n/**\n * React Component displaying a title, a button doing some (AlgoSigner-related) actions\n * and a message with the result.\n *\n * @param buttonAction is a (potentially async) function called when clicking on the button\n *   and returning the result to be displayed\n */\n\nconst ExampleAlgoSigner = ({\n  title,\n  buttonText,\n  buttonAction\n}) => {\n  _s();\n\n  const [result, setResult] = useState(\"\");\n  const onClick = useCallback(async () => {\n    const r = await buttonAction();\n    setResult(r);\n  }, [buttonAction]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      as: \"h2\",\n      dividing: true,\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      primary: true,\n      onClick: onClick,\n      children: buttonText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Message, {\n      children: /*#__PURE__*/_jsxDEV(\"code\", {\n        children: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}; // The following components are all demonstrating some features of AlgoSigner\n\n\n_s(ExampleAlgoSigner, \"glImgLaU2WkF8kj4KKA+v9eKfvY=\");\n\n_c = ExampleAlgoSigner;\n\nconst GetAppGlobalState = () => {\n  _s2();\n\n  const action = useCallback(async () => {\n    try {\n      const r = await AlgoSigner.indexer({\n        ledger: 'TestNet',\n        path: `/v2/applications/${appId}`\n      });\n      return JSON.stringify(r['application']['params']['global-state'][0]['value'][`uint`], null, 2);\n    } catch (e) {\n      console.error(e);\n      return JSON.stringify(e, null, 2);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ExampleAlgoSigner, {\n    title: \"Get Global State\",\n    buttonText: \"Get Global State\",\n    buttonAction: action\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 10\n  }, this);\n};\n\n_s2(GetAppGlobalState, \"LA7q0Q0w2vXW3GtYTqUEdUZvEBo=\");\n\n_c2 = GetAppGlobalState;\n\nconst GetAppLocalState = ({\n  who\n}) => {\n  _s3();\n\n  const action = useCallback(async () => {\n    try {\n      const accts = await AlgoSigner.accounts({\n        ledger: 'TestNet'\n      });\n      const r = await AlgoSigner.indexer({\n        ledger: 'TestNet',\n        path: `/v2/accounts/${accts[who]['address']}`\n      });\n      return JSON.stringify(r['account']['apps-local-state'][0]['key-value'][0]['value']['uint'], null, 2);\n    } catch (e) {\n      console.error(e);\n      return JSON.stringify(e, null, 2);\n    }\n  }, [who]);\n  return /*#__PURE__*/_jsxDEV(ExampleAlgoSigner, {\n    title: \"Get Local State\",\n    buttonText: \"Get Local State\",\n    buttonAction: action\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 10\n  }, this);\n};\n\n_s3(GetAppLocalState, \"LA7q0Q0w2vXW3GtYTqUEdUZvEBo=\");\n\n_c3 = GetAppLocalState;\n\nconst OptInApp = ({\n  who\n}) => {\n  _s4();\n\n  const action = useCallback(async () => {\n    await AlgoSigner.connect({\n      ledger: 'TestNet'\n    });\n    const accts = await AlgoSigner.accounts({\n      ledger: 'TestNet'\n    });\n    const txParams = await AlgoSigner.algod({\n      ledger: 'TestNet',\n      path: '/v2/transactions/params'\n    });\n    const signedTx = await AlgoSigner.sign({\n      from: accts[who]['address'],\n      type: 'appl',\n      appIndex: appId,\n      appOnComplete: 1,\n      fee: txParams['min-fee'],\n      firstRound: txParams['last-round'],\n      lastRound: txParams['last-round'] + 1000,\n      genesisID: txParams['genesis-id'],\n      genesisHash: txParams['genesis-hash']\n    });\n    const r = await AlgoSigner.send({\n      ledger: 'TestNet',\n      tx: signedTx.blob\n    });\n    return JSON.stringify(r, null, 2);\n  }, [who]);\n  return /*#__PURE__*/_jsxDEV(ExampleAlgoSigner, {\n    title: \"Opt In App\",\n    buttonText: \"Opt In App\",\n    buttonAction: action\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 10\n  }, this);\n};\n\n_s4(OptInApp, \"LA7q0Q0w2vXW3GtYTqUEdUZvEBo=\");\n\n_c4 = OptInApp;\n\nconst CallApp = ({\n  who\n}) => {\n  _s5();\n\n  const action = useCallback(async () => {\n    await AlgoSigner.connect({\n      ledger: 'TestNet'\n    });\n    const accts = await AlgoSigner.accounts({\n      ledger: 'TestNet'\n    });\n    const txParams = await AlgoSigner.algod({\n      ledger: 'TestNet',\n      path: '/v2/transactions/params'\n    });\n    const signedTx = await AlgoSigner.sign({\n      from: accts[who]['address'],\n      type: 'appl',\n      appIndex: appId,\n      appOnComplete: 0,\n      appArgs: [''],\n      fee: txParams['min-fee'],\n      firstRound: txParams['last-round'],\n      lastRound: txParams['last-round'] + 1000,\n      genesisID: txParams['genesis-id'],\n      genesisHash: txParams['genesis-hash']\n    });\n    const r = await AlgoSigner.send({\n      ledger: 'TestNet',\n      tx: signedTx.blob\n    });\n    return JSON.stringify(r, null, 2);\n  }, [who]);\n  return /*#__PURE__*/_jsxDEV(ExampleAlgoSigner, {\n    title: \"CallApp\",\n    buttonText: \"CallApp\",\n    buttonAction: action\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 10\n  }, this);\n};\n\n_s5(CallApp, \"LA7q0Q0w2vXW3GtYTqUEdUZvEBo=\");\n\n_c5 = CallApp;\n\nconst TableLocalAppState = () => {\n  return /*#__PURE__*/_jsxDEV(Table, {\n    celled: true,\n    children: [/*#__PURE__*/_jsxDEV(Table.Header, {\n      children: /*#__PURE__*/_jsxDEV(Table.Row, {\n        children: [/*#__PURE__*/_jsxDEV(Table.HeaderCell, {\n          children: \"Alice\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Table.HeaderCell, {\n          children: \"Bob\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table.Body, {\n      children: [/*#__PURE__*/_jsxDEV(Table.Row, {\n        children: [/*#__PURE__*/_jsxDEV(Table.Cell, {\n          children: /*#__PURE__*/_jsxDEV(GetAppLocalState, {\n            who: 0\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Table.Cell, {\n          children: /*#__PURE__*/_jsxDEV(GetAppLocalState, {\n            who: 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Table.Row, {\n        children: [/*#__PURE__*/_jsxDEV(Table.Cell, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Table.Cell, {\n          children: /*#__PURE__*/_jsxDEV(OptInApp, {\n            who: 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Table.Row, {\n        children: [/*#__PURE__*/_jsxDEV(Table.Cell, {\n          children: /*#__PURE__*/_jsxDEV(CallApp, {\n            who: 0\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Table.Cell, {\n          children: /*#__PURE__*/_jsxDEV(CallApp, {\n            who: 1\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 145,\n    columnNumber: 5\n  }, this);\n};\n\n_c6 = TableLocalAppState;\n\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      as: \"h1\",\n      dividing: true,\n      children: [\"Application \", appId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(GetAppGlobalState, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableLocalAppState, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 5\n  }, this);\n};\n\n_c7 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"ExampleAlgoSigner\");\n$RefreshReg$(_c2, \"GetAppGlobalState\");\n$RefreshReg$(_c3, \"GetAppLocalState\");\n$RefreshReg$(_c4, \"OptInApp\");\n$RefreshReg$(_c5, \"CallApp\");\n$RefreshReg$(_c6, \"TableLocalAppState\");\n$RefreshReg$(_c7, \"App\");","map":{"version":3,"sources":["C:/Users/18305/Desktop/algosbuild/src/App.js"],"names":["Button","Container","Header","Message","Table","useState","useCallback","appId","ExampleAlgoSigner","title","buttonText","buttonAction","result","setResult","onClick","r","GetAppGlobalState","action","AlgoSigner","indexer","ledger","path","JSON","stringify","e","console","error","GetAppLocalState","who","accts","accounts","OptInApp","connect","txParams","algod","signedTx","sign","from","type","appIndex","appOnComplete","fee","firstRound","lastRound","genesisID","genesisHash","send","tx","blob","CallApp","appArgs","TableLocalAppState","App"],"mappings":";;;;;;;AAAA;AACA,OAAO,WAAP;AACA,SAAQA,MAAR,EAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,OAAnC,EAA4CC,KAA5C,QAAwD,mBAAxD;AACA,SAAQC,QAAR,EAAkBC,WAAlB,QAAoC,OAApC;;;AAEA,MAAMC,KAAK,GAAG,QAAd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,iBAAiB,GAAG,CAAC;AAACC,EAAAA,KAAD;AAAQC,EAAAA,UAAR;AAAoBC,EAAAA;AAApB,CAAD,KAAuC;AAAA;;AAC/D,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC;AAEA,QAAMS,OAAO,GAAGR,WAAW,CAAC,YAAY;AACtC,UAAMS,CAAC,GAAG,MAAMJ,YAAY,EAA5B;AACAE,IAAAA,SAAS,CAACE,CAAD,CAAT;AACD,GAH0B,EAGxB,CAACJ,YAAD,CAHwB,CAA3B;AAKA,sBACE;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,EAAE,EAAC,IAAX;AAAgB,MAAA,QAAQ,MAAxB;AAAA,gBAA0BF;AAA1B;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,MAAD;AAAQ,MAAA,OAAO,EAAE,IAAjB;AAAuB,MAAA,OAAO,EAAEK,OAAhC;AAAA,gBAA0CJ;AAA1C;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,OAAD;AAAA,6BACE;AAAA,kBACGE;AADH;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA,kBADF;AAWD,CAnBD,C,CAqBA;;;GArBMJ,iB;;KAAAA,iB;;AAuBN,MAAMQ,iBAAiB,GAAG,MAAM;AAAA;;AAC9B,QAAMC,MAAM,GAAGX,WAAW,CAAC,YAAY;AACrC,QAAI;AACF,YAAMS,CAAC,GAAG,MAAMG,UAAU,CAACC,OAAX,CAAmB;AACjCC,QAAAA,MAAM,EAAE,SADyB;AAEjCC,QAAAA,IAAI,EAAG,oBAAmBd,KAAM;AAFC,OAAnB,CAAhB;AAIA,aAAOe,IAAI,CAACC,SAAL,CAAeR,CAAC,CAAC,aAAD,CAAD,CAAiB,QAAjB,EAA2B,cAA3B,EAA2C,CAA3C,EAA8C,OAA9C,EAAwD,MAAxD,CAAf,EAA+E,IAA/E,EAAqF,CAArF,CAAP;AACD,KAND,CAME,OAAOS,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,aAAOF,IAAI,CAACC,SAAL,CAAeC,CAAf,EAAkB,IAAlB,EAAwB,CAAxB,CAAP;AACD;AACF,GAXyB,EAWvB,EAXuB,CAA1B;AAaA,sBAAO,QAAC,iBAAD;AAAmB,IAAA,KAAK,EAAC,kBAAzB;AAA4C,IAAA,UAAU,EAAC,kBAAvD;AAA0E,IAAA,YAAY,EAAEP;AAAxF;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAfD;;IAAMD,iB;;MAAAA,iB;;AAiBN,MAAMW,gBAAgB,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAW;AAAA;;AAClC,QAAMX,MAAM,GAAGX,WAAW,CAAC,YAAY;AACrC,QAAI;AACF,YAAMuB,KAAK,GAAG,MAAMX,UAAU,CAACY,QAAX,CAAoB;AACtCV,QAAAA,MAAM,EAAE;AAD8B,OAApB,CAApB;AAGA,YAAML,CAAC,GAAG,MAAMG,UAAU,CAACC,OAAX,CAAmB;AACjCC,QAAAA,MAAM,EAAE,SADyB;AAEjCC,QAAAA,IAAI,EAAG,gBAAeQ,KAAK,CAACD,GAAD,CAAL,CAAW,SAAX,CAAsB;AAFX,OAAnB,CAAhB;AAIA,aAAON,IAAI,CAACC,SAAL,CAAeR,CAAC,CAAC,SAAD,CAAD,CAAa,kBAAb,EAAiC,CAAjC,EAAoC,WAApC,EAAiD,CAAjD,EAAoD,OAApD,EAA6D,MAA7D,CAAf,EAAqF,IAArF,EAA2F,CAA3F,CAAP;AACD,KATD,CASE,OAAOS,CAAP,EAAU;AACVC,MAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,aAAOF,IAAI,CAACC,SAAL,CAAeC,CAAf,EAAkB,IAAlB,EAAwB,CAAxB,CAAP;AACD;AACF,GAdyB,EAcvB,CAACI,GAAD,CAduB,CAA1B;AAgBA,sBAAO,QAAC,iBAAD;AAAmB,IAAA,KAAK,EAAC,iBAAzB;AAA2C,IAAA,UAAU,EAAC,iBAAtD;AAAwE,IAAA,YAAY,EAAEX;AAAtF;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAlBD;;IAAMU,gB;;MAAAA,gB;;AAoBN,MAAMI,QAAQ,GAAG,CAAC;AAACH,EAAAA;AAAD,CAAD,KAAW;AAAA;;AAC1B,QAAMX,MAAM,GAAGX,WAAW,CAAC,YAAY;AACrC,UAAMY,UAAU,CAACc,OAAX,CAAmB;AACvBZ,MAAAA,MAAM,EAAE;AADe,KAAnB,CAAN;AAGA,UAAMS,KAAK,GAAG,MAAMX,UAAU,CAACY,QAAX,CAAoB;AACtCV,MAAAA,MAAM,EAAE;AAD8B,KAApB,CAApB;AAGA,UAAMa,QAAQ,GAAG,MAAMf,UAAU,CAACgB,KAAX,CAAiB;AACtCd,MAAAA,MAAM,EAAE,SAD8B;AAEtCC,MAAAA,IAAI,EAAE;AAFgC,KAAjB,CAAvB;AAIA,UAAMc,QAAQ,GAAG,MAAMjB,UAAU,CAACkB,IAAX,CAAgB;AACrCC,MAAAA,IAAI,EAAER,KAAK,CAACD,GAAD,CAAL,CAAW,SAAX,CAD+B;AAErCU,MAAAA,IAAI,EAAE,MAF+B;AAGrCC,MAAAA,QAAQ,EAAEhC,KAH2B;AAIrCiC,MAAAA,aAAa,EAAE,CAJsB;AAKrCC,MAAAA,GAAG,EAAER,QAAQ,CAAC,SAAD,CALwB;AAMrCS,MAAAA,UAAU,EAAET,QAAQ,CAAC,YAAD,CANiB;AAOrCU,MAAAA,SAAS,EAAEV,QAAQ,CAAC,YAAD,CAAR,GAAyB,IAPC;AAQrCW,MAAAA,SAAS,EAAEX,QAAQ,CAAC,YAAD,CARkB;AASrCY,MAAAA,WAAW,EAAEZ,QAAQ,CAAC,cAAD;AATgB,KAAhB,CAAvB;AAWA,UAAMlB,CAAC,GAAG,MAAMG,UAAU,CAAC4B,IAAX,CAAgB;AAC9B1B,MAAAA,MAAM,EAAE,SADsB;AAE9B2B,MAAAA,EAAE,EAAEZ,QAAQ,CAACa;AAFiB,KAAhB,CAAhB;AAIA,WAAO1B,IAAI,CAACC,SAAL,CAAeR,CAAf,EAAkB,IAAlB,EAAwB,CAAxB,CAAP;AACD,GA3ByB,EA2BvB,CAACa,GAAD,CA3BuB,CAA1B;AA8BA,sBAAO,QAAC,iBAAD;AAAmB,IAAA,KAAK,EAAC,YAAzB;AAAsC,IAAA,UAAU,EAAC,YAAjD;AAA8D,IAAA,YAAY,EAAEX;AAA5E;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAhCD;;IAAMc,Q;;MAAAA,Q;;AAkCN,MAAMkB,OAAO,GAAG,CAAC;AAACrB,EAAAA;AAAD,CAAD,KAAW;AAAA;;AACzB,QAAMX,MAAM,GAAGX,WAAW,CAAC,YAAY;AACrC,UAAMY,UAAU,CAACc,OAAX,CAAmB;AACvBZ,MAAAA,MAAM,EAAE;AADe,KAAnB,CAAN;AAGA,UAAMS,KAAK,GAAG,MAAMX,UAAU,CAACY,QAAX,CAAoB;AACtCV,MAAAA,MAAM,EAAE;AAD8B,KAApB,CAApB;AAGA,UAAMa,QAAQ,GAAG,MAAMf,UAAU,CAACgB,KAAX,CAAiB;AACtCd,MAAAA,MAAM,EAAE,SAD8B;AAEtCC,MAAAA,IAAI,EAAE;AAFgC,KAAjB,CAAvB;AAIA,UAAMc,QAAQ,GAAG,MAAMjB,UAAU,CAACkB,IAAX,CAAgB;AACrCC,MAAAA,IAAI,EAAER,KAAK,CAACD,GAAD,CAAL,CAAW,SAAX,CAD+B;AAErCU,MAAAA,IAAI,EAAE,MAF+B;AAGrCC,MAAAA,QAAQ,EAAEhC,KAH2B;AAIrCiC,MAAAA,aAAa,EAAE,CAJsB;AAKrCU,MAAAA,OAAO,EAAE,CAAC,EAAD,CAL4B;AAMrCT,MAAAA,GAAG,EAAER,QAAQ,CAAC,SAAD,CANwB;AAOrCS,MAAAA,UAAU,EAAET,QAAQ,CAAC,YAAD,CAPiB;AAQrCU,MAAAA,SAAS,EAAEV,QAAQ,CAAC,YAAD,CAAR,GAAyB,IARC;AASrCW,MAAAA,SAAS,EAAEX,QAAQ,CAAC,YAAD,CATkB;AAUrCY,MAAAA,WAAW,EAAEZ,QAAQ,CAAC,cAAD;AAVgB,KAAhB,CAAvB;AAYA,UAAMlB,CAAC,GAAG,MAAMG,UAAU,CAAC4B,IAAX,CAAgB;AAC9B1B,MAAAA,MAAM,EAAE,SADsB;AAE9B2B,MAAAA,EAAE,EAAEZ,QAAQ,CAACa;AAFiB,KAAhB,CAAhB;AAIA,WAAO1B,IAAI,CAACC,SAAL,CAAeR,CAAf,EAAkB,IAAlB,EAAwB,CAAxB,CAAP;AACD,GA5ByB,EA4BvB,CAACa,GAAD,CA5BuB,CAA1B;AA8BA,sBAAO,QAAC,iBAAD;AAAmB,IAAA,KAAK,EAAC,SAAzB;AAAmC,IAAA,UAAU,EAAC,SAA9C;AAAwD,IAAA,YAAY,EAAEX;AAAtE;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAhCD;;IAAMgC,O;;MAAAA,O;;AAkCN,MAAME,kBAAkB,GAAG,MAAM;AAE/B,sBACE,QAAC,KAAD;AAAO,IAAA,MAAM,MAAb;AAAA,4BACE,QAAC,KAAD,CAAO,MAAP;AAAA,6BACE,QAAC,KAAD,CAAO,GAAP;AAAA,gCACE,QAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,KAAD,CAAO,UAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAOE,QAAC,KAAD,CAAO,IAAP;AAAA,8BACE,QAAC,KAAD,CAAO,GAAP;AAAA,gCACE,QAAC,KAAD,CAAO,IAAP;AAAA,iCAAY,QAAC,gBAAD;AAAkB,YAAA,GAAG,EAAE;AAAvB;AAAA;AAAA;AAAA;AAAA;AAAZ;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,KAAD,CAAO,IAAP;AAAA,iCAAY,QAAC,gBAAD;AAAkB,YAAA,GAAG,EAAE;AAAvB;AAAA;AAAA;AAAA;AAAA;AAAZ;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE,QAAC,KAAD,CAAO,GAAP;AAAA,gCACE,QAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,KAAD,CAAO,IAAP;AAAA,iCAAY,QAAC,QAAD;AAAU,YAAA,GAAG,EAAE;AAAf;AAAA;AAAA;AAAA;AAAA;AAAZ;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,eASE,QAAC,KAAD,CAAO,GAAP;AAAA,gCACE,QAAC,KAAD,CAAO,IAAP;AAAA,iCAAY,QAAC,OAAD;AAAS,YAAA,GAAG,EAAE;AAAd;AAAA;AAAA;AAAA;AAAA;AAAZ;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE,QAAC,KAAD,CAAO,IAAP;AAAA,iCAAY,QAAC,OAAD;AAAS,YAAA,GAAG,EAAE;AAAd;AAAA;AAAA;AAAA;AAAA;AAAZ;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cATF;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD,CA1BD;;MAAMA,kB;;AA4BN,MAAMC,GAAG,GAAG,MAAM;AAChB,sBACE,QAAC,SAAD;AAAW,IAAA,SAAS,EAAC,KAArB;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,EAAE,EAAC,IAAX;AAAgB,MAAA,QAAQ,MAAxB;AAAA,iCAAsC7C,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAGE,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA,YAHF,eAKE,QAAC,kBAAD;AAAA;AAAA;AAAA;AAAA,YALF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD,CAXD;;MAAM6C,G;AAaN,eAAeA,GAAf","sourcesContent":["/* global AlgoSigner */\nimport './App.css';\nimport {Button, Container, Header, Message, Table} from \"semantic-ui-react\";\nimport {useState, useCallback} from \"react\";\n\nconst appId = 13793863;\n/**\n * React Component displaying a title, a button doing some (AlgoSigner-related) actions\n * and a message with the result.\n *\n * @param buttonAction is a (potentially async) function called when clicking on the button\n *   and returning the result to be displayed\n */\nconst ExampleAlgoSigner = ({title, buttonText, buttonAction}) => {\n  const [result, setResult] = useState(\"\");\n\n  const onClick = useCallback(async () => {\n    const r = await buttonAction();\n    setResult(r);\n  }, [buttonAction]);\n\n  return (\n    <>\n      <Header as=\"h2\" dividing>{title}</Header>\n      <Button primary={true} onClick={onClick}>{buttonText}</Button>\n      <Message>\n        <code>\n          {result}\n        </code>\n      </Message>\n    </>\n  );\n};\n\n// The following components are all demonstrating some features of AlgoSigner\n\nconst GetAppGlobalState = () => {\n  const action = useCallback(async () => {\n    try {\n      const r = await AlgoSigner.indexer({\n        ledger: 'TestNet',\n        path: `/v2/applications/${appId}`\n      });\n      return JSON.stringify(r['application']['params']['global-state'][0]['value'][`uint`], null, 2);\n    } catch (e) {\n      console.error(e);\n      return JSON.stringify(e, null, 2);\n    }\n  }, []);\n\n  return <ExampleAlgoSigner title=\"Get Global State\" buttonText=\"Get Global State\" buttonAction={action}/>\n};\n\nconst GetAppLocalState = ({who}) => {\n  const action = useCallback(async () => {\n    try {\n      const accts = await AlgoSigner.accounts({\n        ledger: 'TestNet'\n      });\n      const r = await AlgoSigner.indexer({\n        ledger: 'TestNet',\n        path: `/v2/accounts/${accts[who]['address']}`\n      });\n      return JSON.stringify(r['account']['apps-local-state'][0]['key-value'][0]['value']['uint'], null, 2);\n    } catch (e) {\n      console.error(e);\n      return JSON.stringify(e, null, 2);\n    }\n  }, [who]);\n\n  return <ExampleAlgoSigner title=\"Get Local State\" buttonText=\"Get Local State\" buttonAction={action}/>\n};\n\nconst OptInApp = ({who}) => {\n  const action = useCallback(async () => {\n    await AlgoSigner.connect({\n      ledger: 'TestNet'\n    });\n    const accts = await AlgoSigner.accounts({\n      ledger: 'TestNet'\n    });\n    const txParams = await AlgoSigner.algod({\n      ledger: 'TestNet',\n      path: '/v2/transactions/params'\n    });\n    const signedTx = await AlgoSigner.sign({\n      from: accts[who]['address'],\n      type: 'appl',\n      appIndex: appId,\n      appOnComplete: 1,\n      fee: txParams['min-fee'],\n      firstRound: txParams['last-round'],\n      lastRound: txParams['last-round'] + 1000,\n      genesisID: txParams['genesis-id'],\n      genesisHash: txParams['genesis-hash']\n    })\n    const r = await AlgoSigner.send({\n      ledger: 'TestNet',\n      tx: signedTx.blob\n    })\n    return JSON.stringify(r, null, 2);\n  }, [who]);\n\n\n  return <ExampleAlgoSigner title=\"Opt In App\" buttonText=\"Opt In App\" buttonAction={action}/>\n};\n\nconst CallApp = ({who}) => {\n  const action = useCallback(async () => {\n    await AlgoSigner.connect({\n      ledger: 'TestNet'\n    });\n    const accts = await AlgoSigner.accounts({\n      ledger: 'TestNet'\n    });\n    const txParams = await AlgoSigner.algod({\n      ledger: 'TestNet',\n      path: '/v2/transactions/params'\n    });\n    const signedTx = await AlgoSigner.sign({\n      from: accts[who]['address'],\n      type: 'appl',\n      appIndex: appId,\n      appOnComplete: 0,\n      appArgs: [''],\n      fee: txParams['min-fee'],\n      firstRound: txParams['last-round'],\n      lastRound: txParams['last-round'] + 1000,\n      genesisID: txParams['genesis-id'],\n      genesisHash: txParams['genesis-hash']\n    })\n    const r = await AlgoSigner.send({\n      ledger: 'TestNet',\n      tx: signedTx.blob\n    })\n    return JSON.stringify(r, null, 2);\n  }, [who]);\n\n  return <ExampleAlgoSigner title=\"CallApp\" buttonText=\"CallApp\" buttonAction={action}/>\n};\n\nconst TableLocalAppState = () => {\n\n  return (\n    <Table celled>\n      <Table.Header>\n        <Table.Row>\n          <Table.HeaderCell>Alice</Table.HeaderCell>\n          <Table.HeaderCell>Bob</Table.HeaderCell>\n        </Table.Row>\n      </Table.Header>\n      <Table.Body>\n        <Table.Row>\n          <Table.Cell><GetAppLocalState who={0}/></Table.Cell>\n          <Table.Cell><GetAppLocalState who={1}/></Table.Cell>\n        </Table.Row>\n        <Table.Row>\n          <Table.Cell></Table.Cell>\n          <Table.Cell><OptInApp who={1}/></Table.Cell>\n        </Table.Row>\n        <Table.Row>\n          <Table.Cell><CallApp who={0}/></Table.Cell>\n          <Table.Cell><CallApp who={1}/></Table.Cell>\n        </Table.Row>\n      </Table.Body>\n    </Table>\n  )\n}\n\nconst App = () => {\n  return (\n    <Container className=\"App\">\n      <Header as=\"h1\" dividing>Application {appId}</Header>\n\n      <GetAppGlobalState/>\n\n      <TableLocalAppState/>\n\n    </Container>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}